plugins {
    id 'com.github.ben-manes.versions' version '0.39.0'
    id 'net.minecraftforge.gradleutils' version '1.+'
    id 'org.javamodularity.moduleplugin' version '1.8.7' apply false
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'org.javamodularity.moduleplugin'

group 'net.minecraftforge'

java.toolchain.languageVersion = JavaLanguageVersion.of(16)

version = gradleutils.getTagOffsetVersion()

ext.ASM_VERSION = 9.1

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-r)?$/
    return !stableKeyword && !(version ==~ regex)
}

dependencyUpdates {
    rejectVersionIf {
        isNonStable(it.candidate.version)
    }
}

test {
    exclude '**/*'
    useJUnitPlatform()
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

compileTestJava {
    exclude '**/*'
}

repositories {
    maven {
        name = 'forge'
        url = 'https://maven.minecraftforge.net/'
    }
}

sourceSets {
    testJars
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.7.+')
    testImplementation('org.powermock:powermock-core:2.0.+')
    testImplementation('org.hamcrest:hamcrest-core:2.2')
    testImplementation('org.apache.logging.log4j:log4j-core:2.14.1')
    testCompileOnly('org.jetbrains:annotations:21.0.1')
    compileOnly('org.jetbrains:annotations:21.0.1')
    testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine:5.7.+')
    testRuntimeOnly(sourceSets.testJars.output)
    implementation('cpw.mods:modlauncher:9.0.+')
    implementation('org.apache.logging.log4j:log4j-api:2.14.1')
    api("org.ow2.asm:asm:${ASM_VERSION}")
    api("org.ow2.asm:asm-commons:${ASM_VERSION}")
    api("org.ow2.asm:asm-tree:${ASM_VERSION}")
    api("org.ow2.asm:asm-util:${ASM_VERSION}")
    implementation('net.minecraftforge:forgespi:4.0.+')
    implementation('org.openjdk.nashorn:nashorn-core:15.1.1')
}

ext.sharedManifest = manifest {
    attributes(['Specification-Title': 'coremods',
                'Specification-Vendor': 'forge',
                'Specification-Version': '1', // Currently version 1 of the coremod specification
                'Implementation-Title': project.name,
                'Implementation-Version': "${project.version}+${System.getenv('BUILD_NUMBER')?:0}+${gradleutils.gitInfo.branch}.${gradleutils.gitInfo.abbreviatedId}",
                'Implementation-Vendor' :'forge',
                'Implementation-Timestamp': java.time.Instant.now().toString(),
                'Git-Commit': gradleutils.gitInfo.abbreviatedId,
                'Git-Branch': gradleutils.gitInfo.branch,
                'Build-Number': "${System.getenv("BUILD_NUMBER")?:0}"],
            'net/minecraftforge/coremod/')
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}

task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            pom {
                from components.java
                artifact sourcesJar
                name = 'Core Mods'
                description = 'Core modding framework for use with forge'
                url = 'https://github.com/MinecraftForge/coremods'
                scm {
                    url = 'https://github.com/MinecraftForge/coremods'
                    connection = 'scm:git:git://github.com/MinecraftForge/coremods.git'
                    developerConnection = 'scm:git:git@github.com:MinecraftForge/coremods.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/MinecraftForge/coremods/issues'
                }

                licenses {
                    license {
                        name = 'LGPLv2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

                developers {
                    developer {
                        id = 'cpw'
                        name = 'cpw'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            if (System.env.MAVEN_USER) {
                authentication {
                    basic(BasicAuthentication)
                }
                credentials {
                    username = System.env.MAVEN_USER ?: 'not'
                    password = System.env.MAVEN_PASSWORD ?: 'set'
                }
                url 'https://maven.minecraftforge.net/releases'
			} else {
				url 'file://' + rootProject.file('repo').getAbsolutePath()
			}
        }
    }
}